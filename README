Nabiki - A Comprehensive Trading Platform for Chinese Future Market
===================================================================

Requisites
----------

1. JDK 11+
2. Other opensource 3rds

Communication Protocol between Server and Client
------------------------------------------------

Nabiki turns data to JSON and encodes into frame with the following format:

    <frame type> -- <length> -- <payload in bytes>

The frame type defines the types of the frame, which could be a request, response,
login or heartbeat.

JSON is defined by `com.nabiki.iop.frame.Body` and generated with Gson. The class
has a field `message type` which describes the purpose of the data.

For each request message, it has a request ID, so does a response message. One
request or response can have many fractions that share the same ID.

`total count` tells how many pieces of fraction there are and `current count` tells
the number of current message.

The data is encoded as a JSON string and needs to be decoded one more time.

Dependency Explanation
----------------------

1. Gson is for parsing and generating JSON.
2. Apache Mina is for networking.
3. SLF4J is required by Apache Mina logging filter.

For modules above,centre depends on iop and objects, and iop depends on objects,
Gson and Apache Mina.

Module Explanation
------------------

1. /objects

The module contains pure Java classes for CTP data. Although ctp4j has the data
definition, they are backed by JNI, which means for each data instance in Java, there
is a C/C++ counterpart in JNI that holds the actual data. Upon accessing the fields,
it calls JNI.

Wrapping the data in pure Java saves frequent JNI calls.

2. /iop

The module handles networking and frame/message codec.

3. /centre

Core system that processes trades, receives ticks and generates candles, and manages
user account and positions.

4. /ctp4j

Java SWIG port for CTP. Currently, native DLL is 64-bit, if you need a 32-bit version
or Linux build, use the *.i swig profile to build one.

Make it Work
------------

1. Acquire dependencies.

All dependencies are kept within /lib.

ctp4j only has 64-bit windows JNI binding. If you need other choices, just build
one from src by yourself. Detailed explain step by step can be found in ctp4j module
directory.

2. Configuration

`centre` will create dirs for you and generates sample configs for you if it doesn't
find configuration in dirs. Just follow the sample configs to add your own setting.

But it will not generate samples for user account and position, so you need to add
an initial account with no position before you trade.

3. Setting JNI right

Use `-Djava.library.path=<path-to-dll>` to specify JNI DLLs. Please add the option
before `-jar centre.jar` so JVM recognizes it.

There are 3 DLLs, don't miss any one of them.

4. Commandline arguments

Use commandline option '--help' for detailed information.
    
	java -jar centre.jar --help

And it is recommended to add default charset definition to JVM:

    -Dfile.encoding=UTF-8

So that all charset issues are aligned to UTF-8.


Good luck with trades.

Hongbao Chen
chenhongbao@outlook.com
